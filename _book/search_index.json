[
["index.html", "Building a website using blogdown in R Summary", " Building a website using blogdown in R Alistair Bailey May 18 2018 Summary These are my instructions for how to build a website using R. The inspiration came from a series of tweets by Dan Qunitana about how to build an academic website using the blogdown package (Xie 2018). Following these instructions you can build a website for Bibi the Cat, using the Hugo academic theme but you can of course make a website for anything you like and use any of the many themes available. These instructions assume you have R (R Core Team 2018) and Rstudio installed and are reasonably comfortable using these tools. For much more detail check out the fantastic blogdown book. References "],
["getting-started.html", "1 Getting started 1.1 Installation 1.2 Installing JabRef 1.3 Other files", " 1 Getting started 1.1 Installation First you’ll need to install the blogdown package: install.packages(&quot;blogdown&quot;) Then use blogdown to install the static site generator Hugo: blogdown::install_hugo() 1.2 Installing JabRef If you are going to link academic publications on your website you will probably find it useful to have JabRef installed to create the necessary files you need. JabRef is an open source bibliography reference manager. This is not the only way to do things, but it’s what I’m familiar with and is free. See the publications section for the full details. 1.3 Other files If you want to build Bibi the Cat’s website you’ll need these files. "],
["creating-and-deploying-an-initial-website.html", "2 Creating and deploying an initial website 2.1 Creating a website in R 2.2 Deployment", " 2 Creating and deploying an initial website 2.1 Creating a website in R We’re going to create a website for Bibi the Cat aka The Tiny Tiger. Here she is: Figure 2.1: Bibi the Cat Go to File &gt; New Project &gt; New directory and then scroll down and choose Website using blogdown. This will then take you to the another screen where you can choose the directory for the website and we choose the theme. Given Bibi’s interests in rheology we’ll be using the hugo-academic theme, this is selected by entering gchusen/hugo-academic in the box as shown in Figure 2.2 Figure 2.2: Create a new directory with a suitable name with no spaces and choose a theme, here we’re using gchusen/hugo-academic. Then Create Project and it should download the necessary files, change the working directory to the one created and you should see something like this: There are a bunch of folders and files, and the script editor pane is open with the confog.toml file open for editing. As example files are provided we can build a website immediately using: blogdown::serve_site() And we should see the example site open in the Viewer pane. 2.2 Deployment The simplest way to delpoy our website is to use netlify. Create and account or connect via another account such as GitHub and then from the Sites tab that should appear if you click on your name, drag and drop the public folder from the directory into the box like so: Assuming that goes ok, you’ll then see a randomly generated name for your new site. Click on Site settings to change the name to whatever you wish. You should see the option to change the name like so. Click and follow the instructions. Click on your name to get back to Sites and then click on the name of your website to view it. Congratulations, you’ve created and deployed a website. Next, we’ll go back into R to learn how to change the content. "],
["adding-content-to-the-site.html", "3 Adding content to the site 3.1 The file structure in R 3.2 Configuration 3.3 Choosing sections and editing the biography 3.4 Editing section content 3.5 Creating Projects content 3.6 Troubleshooting", " 3 Adding content to the site 3.1 The file structure in R The folder containing the published website as we saw in the last chapter is the public folder. The config.toml file is where we set the global configurations for the site. For detail see the TOML syntax blogdown chapter, but most of what we’re going to change is quite straightoforward, see Configuration The content folder contains subdirectories containing the files that we create or edit for the sections on the website e.g. publications or project pages. Images and other files we might want (such a CV) go in the static folder and sub-folders respectively. These will then be copied to the public folder when we build the site. We don’t need to touch the other folders for the purposes of this tutorial, but as before the blogdown book has all the details. 3.2 Configuration Here we’ll configure the config.toml file. First we’ll change the title: # Title of your site title = &quot;Professor Bibi Cat&quot; Then we change the details: # Your details. name = &quot;Bibi the Cat&quot; role = &quot;Professor of Chaos Theory and Practice&quot; # Organizations/Affiliations. # Separate multiple entries with a comma, using the form: # `[ {name=&quot;Org1&quot;, url=&quot;&quot;}, {name=&quot;Org2&quot;, url=&quot;&quot;} ]`. organizations = [ { name = &quot;Feline University&quot;, url = &quot;&quot; } ] Next we change the avatar picture by copying an image to static/img and either calling it potrait.jpg or changing the name in the config.toml file. We’ll also change the other details, deleting anything we don’t want: gravatar = false # Get your avatar from Gravatar.com? (true/false) avatar = &quot;portrait.jpg&quot; # Specify an avatar image (in `static/img/` folder) # or delete value to disable avatar. email = &quot;bibi@example.org&quot; address = &quot;Red Fleecy Blanket, Southampton&quot; office_hours = &quot;Whenever I&#39;m hungry&quot; phone = &quot;&quot; skype = &quot;&quot; telegram = &quot;&quot; Then we’ll change the social media icons to include ORCID, this uses the ai icon pack, rather than the fa icon pack: [[params.social]] icon = &quot;orcid&quot; icon_pack = &quot;ai&quot; link = &quot;https://orcid.org/0000-000X-XXXX-XXXX&quot; [[params.social]] icon = &quot;twitter&quot; icon_pack = &quot;fa&quot; link = &quot;//twitter.com/bibi-the-cat&quot; We can add, move or remove links that appear on the homepage of the website. Bibi is too busy sleeping to write blog posts or do any teaching, but she would like to promote her CV which we’ll add to the static/files folder: [[menu.main]] name = &quot;Home&quot; url = &quot;#about&quot; weight = 1 [[menu.main]] name = &quot;Publications&quot; url = &quot;#publications&quot; weight = 2 [[menu.main]] name = &quot;CV&quot; url = &quot;/files/cv.pdf&quot; weight = 3 [[menu.main]] name = &quot;Projects&quot; url = &quot;#projects&quot; weight = 4 [[menu.main]] name = &quot;Contact&quot; url = &quot;#contact&quot; weight = 6 Explore to find out what else you can change, such as the publication format. 3.3 Choosing sections and editing the biography In the content/home folder are a series of files which configure the sections widgets. To turn a section off, open the relevant file and change active = true to active = false. For example, Bibi is far too busy sleeping to do any teaching, so we’ll turn of the teaching widget by opening teaching.md and changing the active status. Let’s do this for hero, publications_selected, posts,talks and teaching. And now look at the updated site. hero controlled the top banner, and publications is where the link on our menu bar links to. 3.4 Editing section content The template files in content/home are written in markdown, lightweight markup language, where for example # indicates Heading 1 and ## Heading 2. See the markdown cheatsheet to quickly understand the syntax. You can also write Rmarkdown files here, we’re not going to, but see here for details. Starting with the about file, the bit between the +++ symbols is for the about widget that creates the interests and education bit on the homepage. +++ # About/Biography widget. widget = &quot;about&quot; active = true date = 2016-04-20T00:00:00 # Order that this section will appear in. weight = 5 # List your academic interests. [interests] interests = [ &quot;Sleeping&quot;, &quot;Cardboard boxes and bags&quot;, &quot;Dreamies&quot; ] # List your qualifications (such as academic degrees). [[education.courses]] course = &quot;PhD in Causing Chaos&quot; institution = &quot;University of Life&quot; year = 2012 [[education.courses]] course = &quot;MEng in Cardboard Box Destruction&quot; institution = &quot;University of Life&quot; year = 2009 [[education.courses]] course = &quot;BSc in Covering Everything in Hair&quot; institution = &quot;University of Life&quot; year = 2008 +++ # Biography Bibi the Cat is a Professor in Chaos Theory and Practice. 90% of her time is spent snoozing, whilst she devotes the other 10% to destroying things and eating tasty treats. Don&#39;t call her, she&#39;ll call you. 3.5 Creating Projects content Now if we go up to the content directory you’ll see we have folders for projects and publication. Let’s go into content/project and open deep-learning.md and edit it, starting with the widget section to change: the date the title the summary the preview image to the one in static/img the tags the header image also to ehe one in static/img And then write whatever we want to about the project, below the +++ , I’ve added some markdown for another image also in the static/img/ folder so we have this: +++ # Date this page was created. date = 2018-05-17T00:00:00 # Project title. title = &quot;Bags&quot; # Project summary to display on homepage. summary = &quot;Bibi loves to get into bags&quot; # Optional image to display on homepage (relative to `static/img/` folder). image_preview = &quot;bibi-bag.jpg&quot; # Tags: can be used for filtering projects. # Example: `tags = [&quot;machine-learning&quot;, &quot;deep-learning&quot;]` tags = [&quot;bags&quot;] # Optional external URL for project (replaces project detail page). external_link = &quot;&quot; # Does the project detail page use math formatting? math = false # Optional featured image (relative to `static/img/` folder). [header] image = &quot;bibi-bag.jpg&quot; caption = &quot;Bibi in a bag&quot; +++ I love bags, but also boxes. In fact anything I can get inside, especially if you don&#39;t want me to. ![Bibi in a box](/img/bibi-box.jpg) I then save this as bags.md and delete the deep-learning.md file. I’ll leave you to explore the external link example, but it requires editing the widget as before for title, date and images, and then changing the link to your external webpage. In the next chapter we’ll look at adding publications to the site. 3.6 Troubleshooting When you start changing things, you may find that the site stops automatically updating. This indicates an error. To find out what is wrong, go to the Terminal tab in Rstudio and type hugo -v and try to figure it out. Here, I’ve removed deep-learning.md from the project folder, but the error indicated there are references to it in other files that I needed to amend. For the first error, I opened the content/talk/ folder and in the example-talk.md file I see that line 19 has projects = [&quot;deep-learnig&quot;] . So I commented it out with a # symbol. Follow the same approach for all errors until when you run hugo -v there are no more, and the site should now build. "],
["creating-publication-files.html", "4 Creating publication files 4.1 Citation format 4.2 Converting Bibtex files", " 4 Creating publication files This is probably the most fiddly part. In the content/publication folder we need .md files for each publication we want to add to our site. Bibi being quite a lazy cat only has one publication, but we’ll look at how to automate the process for many. 4.1 Citation format To add publication citations, we first need them in bibtex format. This can be done using JabRef. Open JabRef and go to Options &gt; Preferences &gt; General and ensure Default encoding is set to UTF-8 Then go to Options &gt; Preferences &gt; Bibtex key generator and set this to [auth:lower][year] and then OK. Then create a library File &gt; New Bibtex Library. If you have exported your publications from EndNote or other software as bibtex you can import this into your new library and then highlight the list and click on the key icon to generate bibtex keys. Alternatively, we can generate the list using the search function, here I entered a DOI and searched with Google Scholar: Then I selected the publication and generated the key. Now we save the bibtex library. Here it is cats.bib. It’s just another text file so can be viewed in any text editor. 4.2 Converting Bibtex files Converting to markdown requires some effort, fortunately Lorenzo Buesetto wrote a function that required a small hack to work with JabRef. I found the function still may output files that need a bit of cleaning up, but generally it works really well. We need the tidyverse, RefManageR, anytime packages installed. bibtex_2academic &lt;- function(bibfile, outfold, abstract = FALSE, overwrite = FALSE) { require(RefManageR) require(dplyr) require(stringr) require(anytime) # Import the bibtex file and convert to data.frame mypubs &lt;- ReadBib(bibfile, check = &quot;warn&quot;, .Encoding = &quot;UTF-8&quot;) %&gt;% as.data.frame() # assign &quot;categories&quot; to the different types of # publications mypubs &lt;- mypubs %&gt;% dplyr::mutate( pubtype = dplyr::case_when( bibtype == &quot;Article&quot; ~ &quot;2&quot;, bibtype == &quot;Article in Press&quot; ~ &quot;2&quot;, bibtype == &quot;InProceedings&quot; ~ &quot;1&quot;, bibtype == &quot;Proceedings&quot; ~ &quot;1&quot;, bibtype == &quot;Conference&quot; ~ &quot;1&quot;, bibtype == &quot;Conference Paper&quot; ~ &quot;1&quot;, bibtype == &quot;MastersThesis&quot; ~ &quot;3&quot;, bibtype == &quot;PhdThesis&quot; ~ &quot;3&quot;, bibtype == &quot;Manual&quot; ~ &quot;4&quot;, bibtype == &quot;TechReport&quot; ~ &quot;4&quot;, bibtype == &quot;Book&quot; ~ &quot;5&quot;, bibtype == &quot;InCollection&quot; ~ &quot;6&quot;, bibtype == &quot;InBook&quot; ~ &quot;6&quot;, bibtype == &quot;Misc&quot; ~ &quot;0&quot;, TRUE ~ &quot;0&quot; ) ) # create a function which populates the md template # based on the info # about a publication create_md &lt;- function(x) { # define a date and create filename by appending date # and start of title if (!is.na(x[[&quot;year&quot;]])) { x[[&quot;date&quot;]] &lt;- paste0(x[[&quot;year&quot;]], &quot;-01-01&quot;) } else { x[[&quot;date&quot;]] &lt;- &quot;2999-01-01&quot; } filename &lt;- paste( x[[&quot;date&quot;]], x[[&quot;title&quot;]] %&gt;% str_replace_all(fixed(&quot; &quot;), &quot;_&quot;) %&gt;% str_remove_all(fixed(&quot;:&quot;)) %&gt;% str_sub(1, 20) %&gt;% paste0(&quot;.md&quot;), sep = &quot;_&quot; ) # start writing if (!file.exists(file.path(outfold, filename)) | overwrite) { fileConn &lt;- file.path(outfold, filename) write(&quot;+++&quot;, fileConn) # Title and date write(paste0(&quot;title = \\&quot;&quot;, x[[&quot;title&quot;]], &quot;\\&quot;&quot;), fileConn, append = T) write(paste0(&quot;date = \\&quot;&quot;, anydate(x[[&quot;date&quot;]]), &quot;\\&quot;&quot;), fileConn, append = T) # Authors. Comma separated list, e.g. `[&quot;Bob Smith&quot;, # &quot;David Jones&quot;]`. auth_hugo &lt;- str_replace_all(x[&quot;author&quot;], &quot; and &quot;, &quot;\\&quot;, \\&quot;&quot;) auth_hugo &lt;- stringi::stri_trans_general(auth_hugo, &quot;latin-ascii&quot;) write(paste0(&quot;authors = [\\&quot;&quot;, auth_hugo, &quot;\\&quot;]&quot;), fileConn, append = T) # Publication type. Legend: # 0 = Uncategorized, 1 = Conference paper, # 2 = Journal article # 3 = Manuscript, 4 = Report, 5 = Book, 6 = Book # section write(paste0(&quot;publication_types = [\\&quot;&quot;, x[[&quot;pubtype&quot;]], &quot;\\&quot;]&quot;), fileConn, append = T) # Publication details: journal, volume, issue, # page numbers and doi link publication &lt;- x[[&quot;journal&quot;]] if (!is.na(x[[&quot;volume&quot;]])) publication &lt;- paste0(publication, &quot;, (&quot;, x[[&quot;volume&quot;]], &quot;)&quot;) if (!is.na(x[[&quot;pages&quot;]])) publication &lt;- paste0(publication, &quot;, _pp. &quot;, x[[&quot;pages&quot;]], &quot;_&quot;) if (!is.na(x[[&quot;doi&quot;]])) publication &lt;- paste0(publication, &quot;, &quot;, paste0(&quot;https://doi.org/&quot;, x[[&quot;doi&quot;]])) write(paste0(&quot;publication = \\&quot;&quot;, publication, &quot;\\&quot;&quot;), fileConn, append = T) write(paste0(&quot;publication_short = \\&quot;&quot;, publication, &quot;\\&quot;&quot;), fileConn, append = T) # Abstract and optional shortened version. if (abstract) { write(paste0(&quot;abstract = \\&quot;&quot;, x[[&quot;abstract&quot;]], &quot;\\&quot;&quot;), fileConn, append = T) } else { write(&quot;abstract = \\&quot;\\&quot;&quot;, fileConn, append = T) } write(paste0(&quot;abstract_short = \\&quot;&quot;, &quot;\\&quot;&quot;), fileConn, append = T) # other possible fields are kept empty. They can be # customized later by # editing the created md write(&quot;image_preview = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;selected = false&quot;, fileConn, append = T) write(&quot;projects = []&quot;, fileConn, append = T) write(&quot;tags = []&quot;, fileConn, append = T) #links write(&quot;url_pdf = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_preprint = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_code = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_dataset = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_project = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_slides = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_video = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_poster = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;url_source = \\&quot;\\&quot;&quot;, fileConn, append = T) #other stuff write(&quot;math = true&quot;, fileConn, append = T) write(&quot;highlight = true&quot;, fileConn, append = T) # Featured image write(&quot;[header]&quot;, fileConn, append = T) write(&quot;image = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;caption = \\&quot;\\&quot;&quot;, fileConn, append = T) write(&quot;+++&quot;, fileConn, append = T) } } # apply the &quot;create_md&quot; function over the # publications list to generate # the different &quot;md&quot; files. apply( mypubs, FUN = function(x) create_md(x), MARGIN = 1 ) } To use this function, save it as bibtex_2academic.R and then load the fcuntion into your R environment using source(&quot;bibtex_2academic.R&quot;). Then assuming you have a JabRef outputted Bixbtex file, here cats.bib we need to assign variables for the bibtex file and the output location, which in this case will be content/publication. Then we use these variables as arguement to the conversion function: # Bibtex file in my directory my_bibfile &lt;- &quot;cats.bib&quot; # Where I want the markdown output to go outfold &lt;- &quot;content/publication&quot; # Use the conversion function bibtex_2academic &lt;- function(my_bibfile, outfold, abstract = FALSE, overwrite = FALSE ) All being well, we should now have a markdown file for each publication (we only had one in this example) in the content/publication. It may need some manual tweaking if the format on the webpage isn’t quite right. We can remove the example files that came with the template. Bibi should now have her website configured and what’s left is to re-deploy the completed version which should look like this: "],
["automating-deployment-with-github.html", "5 Automating deployment with GitHub", " 5 Automating deployment with GitHub In Chapter 2 we used drag and drop of the public folder, but if you are familiar with version control (and if you aren’t it’s definitely worth learning), then you can automate deployment using GitHub. The details are in the blogdown book, but essentially you can link netlify to your GitHub account and deploy to netlify from there. This means that anytime you update your site in Rstudio, you can push your files to GitHub and your site will be deployed automatically. Basically, this means you are tracking your changes and deploying in one step, which is both quicker and means it’s easy to revert should you need to. "]
]
